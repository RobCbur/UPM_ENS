org 496 ; ------------------------VARIABLES TEST-----------------------------

r30_inicio: data 86000

palabra_loncad1: data "abzxqwyunl" ; size 10 (A)

 res 12

palabra_longad2: data 0x00; 0

res 4



palabra_buscacar: data "*qwe*rt--y\0"

res 4

plabra_buscacar2: data 0x6577712A ,0x2D74722A , 0x00A02D

res 4

;palabra_buscacar3: data "*aze*rt--y\0"

palabra_busca3: data "a*ze*rt--y\0"


res 4

palabra_coincidencad1:data "qwerty"

res 8

palabra_coincad2:data "azerty" 

res 8

palabra_coinc3:data "qwerti"

res 8
;;;;;;;;;;;;;;;;;;;;;;;
c_buscacar1: data "*"

res 12

c_buscacar2: data "|"

res 12

c_buscacar3: data 0xA0

res 12
c_buscacar4: data "y"

res 12

c_buscacar5: data "a"

res 12
;;;;;;;;;;;;;;;;;;;;;;;;;

from_buscacar1: data 0

res 12

to_buscacar1: data 10

res 12
;;;;;;;;;;;;;;;;

from_buscacar2:data 3

res 12

to_buscacar2: data 10

res 12

;;;;;;;;;;;;;;;;;;;;
from_buscacar3:data 5

res 12

to_buscacar3: data 5

res 12

;;;;;;;;;;;;;;;;;;;;;

from_buscacar4:data 0

res 12

to_buscacar4: data 7

res 12






palabra_longcad3: data "0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF" ;0x100

res 16




org 2000 ;--------------------------MACROS Y SUBRUTINAS---------------------------------



DBNZ: MACRO (ra,eti)
    sub ra,ra,1
    cmp r4,ra,0
    bb0 2,r4,eti
ENDMACRO

LEA: MACRO (ra, eti)
    or ra, r0, low(eti)
    or.u ra, ra, high(eti)
ENDMACRO


LOAD: MACRO (ra, eti)
    LEA (ra, eti)
    ld ra, ra, r0
ENDMACRO


POP: MACRO(ra)
    ld ra,r30,0
    
    add r30,r30,4
ENDMACRO

PUSH: MACRO (ra)
    sub r30,r30,4
    st ra,r30,0
ENDMACRO





LongCad:

PUSH(r1)            ; Guarda dirección de retorno
PUSH(r3)            ; Guarda r3 (contador)
PUSH(r4)            ; Guarda r4 (registro temporal para comparación)
PUSH(r11)           ; Guarda r11 (puntero de la cadena)
PUSH(r12)           ; Guarda r12 (temporal para cargar caracteres)
PUSH(r31)           ; Guarda marco de pila anterior

xor r4, r4, r4      ; Inicializa r4 a 0 para comparación
xor r3, r3, r3      ; Inicializa r3 a 0, este será el contador de la longitud
xor r11, r11, r11   ; Inicializa r11 a 0 (se usará como puntero)
xor r12, r12, r12   ; Inicializa r12 a 0 para caracteres de la cadena

or r31, r30, 0      ; Guarda el marco actual de pila en r31

ld r11, r31, 24     ; Carga la dirección de inicio de la cadena en r11
subu r11, r11, 4    ; Desplaza el puntero 4 bytes hacia atrás para iniciar lectura
subu r3, r3, 4      ; Configura el contador para leer palabras de 4 bytes



; Bucle para procesar palabras de 4 bytes
addu r3, r3, 4      ; Incrementa el contador en 4 bytes
addu r11, r11, 4    ; Mueve el puntero al siguiente bloque de 4 bytes
ld r12, r11, 0      ; Carga la palabra actual de la cadena en r12
cmp r4, r12, r0     ; Compara si la palabra contiene un byte nulo
bb0 12, r4, -4      ; Si no hay byte nulo, sigue a la siguiente palabra


subu r3, r3, 1      ; Ajusta el contador para leer los caracteres finales
subu r11, r11, 1    ; Ajusta el puntero para comenzar el bucle de caracteres


; Bucle para procesar caracteres individuales
addu r3, r3, 1      ; Incrementa el contador
addu r11, r11, 1    ; Avanza el puntero de un byte
ld.bu r12, r11, 0   ; Carga un byte de la cadena
cmp r4, r12, r0     ; Compara el byte con 0
bb0 2, r4, -4       ; Si encuentra el terminador, sale del bucle

or r29, r3, r0      ; Guarda la longitud calculada en r29
or r30, r31, r0     ; Restaura el marco de pila

; Restaura los registros y vuelve

POP(r31)
POP(r12)
POP(r11)
POP(r4)
POP(r3)

POP(r1)
jmp(r1)



BuscaCar:

PUSH(r1)            ; Guarda dirección de retorno en la pila
PUSH(r31)           ; Guarda el marco de pila anterior
PUSH(r3)            ; Guarda r3 (contador de coincidencias)
PUSH(r11)           ; Guarda r11 (puntero de la cadena)
PUSH(r4)            ; Guarda r4 (registro de comparación)
PUSH(r6)            ; Guarda r6 (registro temporal para tamaño)
PUSH(r5)            ; Guarda r5 (carácter a buscar)
PUSH(r12)           ; Guarda r12 (temporal para cargar caracteres)
PUSH(r7)            ; Guarda r7 (temporal para controlar el final)

; Inicializa los registros necesarios para la búsqueda
xor r7, r7, r7      ; Inicializa r7 a 0 (usado para comparación de tamaño)
xor r5, r5, r5      ; Inicializa r5 a 0 (carácter a buscar)
xor r3, r3, r3      ; Inicializa r3 a 0 (contador de ocurrencias)
xor r11, r11, r11   ; Inicializa r11 a 0 (puntero de la cadena)
xor r4, r4, r4      ; Inicializa r4 a 0 (registro temporal para comparación)
xor r12, r12, r12   ; Inicializa r12 a 0 (registro temporal para el carácter actual)

or r31, r30, 0      ; Guarda el marco actual de pila en r31

ld r5, r31, 48      ; Carga en r5 el carácter a buscar
ld r11, r31, 44     ; Carga en r11 la dirección de inicio de la cadena
ld r4, r31, 40      ; Carga en r4 el tamaño de la cadena
ld r6, r31, 36      ; Carga en r6 el límite de búsqueda
subu r7, r6, r4     ; Calcula r7 como límite de búsqueda menos el tamaño
addu r11, r11, r4   ; Ajusta el puntero r11 para empezar a recorrer la cadena 


; Configura r3 y r11 para el inicio de la búsqueda
subu r11, r11, 1    ; Mueve el puntero r11 una posición hacia atrás
subu r3, r3, 1      ; Configura el contador en r3


; Bucle para recorrer cada carácter de la cadena
addu r3, r3, 1      ; Incrementa el contador de ocurrencias
addu r11, r11, 1    ; Avanza el puntero de la cadena

ld.bu r12, r11, 0   ; Carga el carácter actual de la cadena en r12
cmp r4, r12, r5     ; Compara r12 (carácter actual) con r5 (carácter buscado)
cmp r6, r12, r0     ; Compara r12 con 0 para ver si es el final de la cadena
or r4, r6, r4       ; Almacena el resultado de comparación en r4
cmp r6, r7, r3      ; Compara el contador con el límite de búsqueda
or r4, r4, r6       ; Actualiza r4 para detenerse si se llega al límite
bb0 2, r4, -8       ; Si r4 indica coincidencia o fin, termina el bucle
      



or r29, r3, r0      ; Guarda el total de coincidencias en r29
ld r4, r31, 40      ; Restaura r4 desde la pila
addu r29, r29, r4   ; Agrega el tamaño de la cadena a r29 si es necesario

or r30, r31, 0      ; Restaura el marco de pila

; Restaura los registros y vuelve
POP(r7)
POP(r12)
POP(r5)
POP(r6)
POP(r4)
POP(r11)
POP(r3)
POP(r31)

POP(r1)
jmp(r1)


CoincidenCad:  ;31,32

PUSH(r1)            ; Guarda dirección de retorno
PUSH(r31)           ; Guarda marco de pila anterior
PUSH(r3)            ; Guarda r3 (contador)
PUSH(r11)           ; Guarda r11 (puntero de la primera cadena)
PUSH(r4)            ; Guarda r4 (registro de comparación)
PUSH(r12)           ; Guarda r12 (puntero de la segunda cadena)
PUSH(r21)           ; Guarda r21 (temporal para cargar de la primera cadena)
PUSH(r22)           ; Guarda r22 (temporal para cargar de la segunda cadena)
PUSH(r5)            ; Guarda r5 (registro de coincidencias)


xor r5, r5, r5      ; Inicializa r5 a 0 (registro de coincidencias)
xor r3, r3, r3      ; Inicializa r3 a 0 (contador de coincidencias)
xor r11, r11, r11   ; Inicializa r11 a 0 (puntero de la primera cadena)
xor r4, r4, r4      ; Inicializa r4 a 0 (comparación)
xor r12, r12, r12   ; Inicializa r12 a 0 (puntero de la segunda cadena)
xor r21, r21, r21   ; Inicializa r21 a 0 (temporal de primera cadena)
xor r22, r22, r22   ; Inicializa r22 a 0 (temporal de segunda cadena)

or r31, r30, 0      ; Guarda el marco actual de pila en r31

ld r11, r31, 40     ; Carga la dirección de la primera cadena en r11
ld r12, r31, 36     ; Carga la dirección de la segunda cadena en r12
subu r11, r11, 1    ; Ajusta el puntero de la primera cadena
subu r12, r12, 1    ; Ajusta el puntero de la segunda cadena
subu r3, r3, 1      ; Configura el contador


; Bucle de comparación de caracteres
addu r3, r3, 1      ; Incrementa el contador
addu r12, r12, 1    ; Avanza el puntero de la segunda cadena
addu r11, r11, 1    ; Avanza el puntero de la primera cadena
ld.bu r21, r11, 0   ; Carga un byte de la primera cadena en r21
ld.bu r22, r12, 0   ; Carga un byte de la segunda cadena en r22
cmp r4, r21, r22    ; Compara los bytes de ambas cadenas
cmp r5, r21, r0     ; Compara el byte con 0
bb0 2, r4, 2        ; Si los caracteres no coinciden, termina el bucle
bb0 2, r5, -8       ; Si se encuentra el fin de cadena, termina el bucle


or r29, r3, r0      ; Guarda la cantidad de coincidencias en r29
or r30, r31, r0     ; Restaura el marco de pila

; Restaura los registros y vuelve
POP(r5)
POP(r22)
POP(r21)
POP(r12)
POP(r4)
POP(r11)
POP(r3)
POP(r31)

POP(r1)
jmp(r1)



;
; Debe incorporar este fichero con TODAS sus líneas, sin modificar
; ninguna de ellas, al final de su archivo CDV24.ens
;
; Este aviso se refiere también a las líneas de comentario
; 
;
;; Grupo:    230078 - Mon Oct 28 20:39:49 CET 2024

BuscaMax:
	PUSH (r1)
	PUSH (r31)
	or   r31, r30, 0
	or   r28, r0, 0x336B
	PUSH (r28)

	ld   r10, r31, 8;  REF
	ld   r11, r31, 12; MAX
	ld   r12, r31, 16; Dir(JJ)

	sub  r5, r0, 1		; guarda -1 en *JJ por si no se
	st   r5, r12, 0		; encuentran coincidencias

	addu r27, r0, r0  ; P
	addu r28, r0, r0  ; L

BucBM:
	ld.bu r20, r10, r11	; C=REF(max)

				; Reserva registros que
				; necesita conservar
	PUSH (r28) 	    	; L
	PUSH (r11)	    	; MAX

	     		    	; Parámetros de BuscaCar
	PUSH (r27)	    	; P
	PUSH (r10)	    	; REF
	PUSH (r20)	   	; C
	bsr  BuscaCar
	POP  (r20)
	POP  (r10)
	POP  (r27)

	POP  (r11)		; Recupera registros
	POP  (r28)	        ; salvaguardados

	cmp  r5, r29, r11	; nuevo P es >= MAX ??
	bb1  hs, r5, finBM
	addu r27, r29, r0	; P = nuevo P
	
	addu r13, r10, r27	; *REF(P)
	addu r14, r10, r11 	; *REF(max)	

	PUSH (r11)     		; Reserva registros que
	PUSH (r10)		; necesita conservar
	PUSH (r28)
	PUSH (r27)
	
	PUSH (r14)		; Parámetros de CoincidenCad
	PUSH (r13)
	bsr  CoincidenCad
	POP  (r13)
	POP  (r14)
	
	POP  (r27)		; Recupera registros
	POP  (r28)		; salvaguardados
	POP  (r10)
	POP  (r11)

	cmp r5, r29, r28	; Comprueba si longitud > L
	bb1 le, r5, contBM	; Si no lo es, continúa
	cmp r5, r29, 255	; Comprueba si longitud > 255
	bb1 le, r5, noLimBM	; Si no lo es, continúa
	addu r29, r0, 255	; Si lo es, limita su valor a 255
	
noLimBM:
	addu r28, r29, r0	; actualiza L
	ld   r12, r31, 16	; Dir(JJ)
	st   r27, r12, r0	; actualiza P en *JJ
	bb1 ge, r5, finBM	; Si coincidencia >= 255 termina
contBM: 
	addu r27, r27, 1	; Pasa al siguiente carácter
	cmp  r5, r27, r11	; Es P>=max ?
	bb1  hs, r5, finBM
	
	br   BucBM   		; Nueva búsqueda del primer carácter

finBM:
	addu r29, r28, r0	; asigna L al valor de retorno r29
	  
	or   r27, r0, 0xA7C
	POP  (r28)

	or   r30, r31, 0
	POP  (r31)
	POP  (r1)
	jmp  (r1)
;; Grupo:    230078


PoneBitA1:
PUSH(r1)
POP(r1)
jmp(r1)


Comprime:
PUSH(r1)
POP(r1)
jmp(r1)


LeeBit:
PUSH(r1)
POP(r1)
jmp(r1)


Descomprime:
PUSH(r1)
POP(r1)
jmp(r1)

Verifica:
PUSH(r1)
POP(r1)
jmp(r1)



; -----------------------------TESTS--------------------------------
org 5000

TLONGCA1:PUSH(r1) ; 0x10
LEA(r3, palabra_loncad1)
PUSH(r3)
LEA(r3, LongCad)
jsr(r3)
POP(r3)
POP(r1)
jmp(r1)


TLONGCA2:PUSH(r1) ;0x 00
LEA(r3, palabra_longad2)
PUSH(r3)
LEA(r3, LongCad)
jsr(r3)
POP(r3)
POP(r1)
jmp(r1)


TLONGCA3:PUSH(r1) ;0x 01 00
LEA(r3, palabra_longcad3)
PUSH(r3)
LEA(r3, LongCad)
jsr(r3)
POP(r3)
POP(r1)
jmp(r1)



TBUSCCAR1:PUSH(r1) ; 0x00
LOAD(r3,c_buscacar1)
PUSH(r3) 
LEA(r3,palabra_buscacar)
PUSH(r3) 
LOAD(r3,from_buscacar1)
PUSH(r3) 
LOAD(r3,to_buscacar1)
PUSH(r3) 
LEA(r3, BuscaCar)

jsr(r3)

POP(r3)
POP(r3)
POP(r3)
POP(r3)
POP(r1)
jmp(r1)





TBUSCCAR2:PUSH(r1) ;0x4
 LOAD(r3,c_buscacar1)
PUSH(r3) 
LEA(r3,palabra_buscacar)
PUSH(r3) 
LOAD(r3,from_buscacar2)
PUSH(r3) 
LOAD(r3,to_buscacar2)
PUSH(r3) 
LEA(r3, BuscaCar)

jsr(r3)

POP(r3)
POP(r3)
POP(r3)
POP(r3)
POP(r1)

jmp(r1)




TBUSCCAR3:PUSH(r1) ;0xA
 LOAD(r3,c_buscacar2)
PUSH(r3) 
LEA(r3,palabra_buscacar)
PUSH(r3) 
LOAD(r3,from_buscacar1)
PUSH(r3) 
LOAD(r3,to_buscacar1)
PUSH(r3) 

LEA(r3, BuscaCar)

jsr(r3)

POP(r3)
POP(r3)
POP(r3)
POP(r3)
POP(r1)

jmp(r1)

TBUSCCAR4:PUSH(r1) ;0xA
 LOAD(r3,c_buscacar3)
PUSH(r3) 
LEA(r3,plabra_buscacar2)
PUSH(r3) 
LOAD(r3,from_buscacar1)
PUSH(r3) 
LOAD(r3,to_buscacar1)
PUSH(r3) 

LEA(r3, BuscaCar)

jsr(r3)

POP(r3)
POP(r3)
POP(r3)
POP(r3)
POP(r1)

jmp(r1)

TBUSCCAR5:PUSH(r1) ;0xA
 LOAD(r3,c_buscacar1)
PUSH(r3) 
LEA(r3,plabra_buscacar)
PUSH(r3) 
LOAD(r3,from_buscacar3)
PUSH(r3) 
LOAD(r3,to_buscacar3)
PUSH(r3) 

LEA(r3, BuscaCar)

jsr(r3)

POP(r3)
POP(r3)
POP(r3)
POP(r3)
POP(r1)

jmp(r1)

TBUSCCAR6:PUSH(r1) ;0xA
 LOAD(r3,c_buscacar4)
PUSH(r3) 
LEA(r3,plabra_buscacar)
PUSH(r3) 
LOAD(r3,from_buscacar4)
PUSH(r3) 
LOAD(r3,to_buscacar4)
PUSH(r3) 

LEA(r3, BuscaCar)

jsr(r3)

POP(r3)
POP(r3)
POP(r3)
POP(r3)
POP(r1)

jmp(r1)

TBUSCCAR7:PUSH(r1) ;0xA
 LOAD(r3,c_buscacar5)
PUSH(r3) 
LEA(r3,palabra_busca3)
PUSH(r3) 
LOAD(r3,from_buscacar1)
PUSH(r3) 
LOAD(r3,to_buscacar1)
PUSH(r3) 

LEA(r3, BuscaCar)

jsr(r3)

POP(r3)
POP(r3)
POP(r3)
POP(r3)
POP(r1)

jmp(r1)




TCC1: PUSH(r1);0x06
LEA(r3,palabra_coincidencad1)
PUSH(r3) 
LEA(r3,palabra_coincidencad1)
PUSH(r3) 
LEA(r3,CoincidenCad)

jsr(r3)
POP(r3)
POP(r3)
POP(r1)

jmp(r1)


TCC2:PUSH(r1) ;0x00
LEA(r3,palabra_coincidencad1)
PUSH(r3) 
LEA(r3,palabra_coincad2)
PUSH(r3) 
LEA(r3,CoincidenCad)

jsr(r3)
POP(r3)
POP(r3)
POP(r1)

jmp(r1)



TCC3:PUSH(r1) ;0x05
LEA(r3,palabra_coincidencad1)
PUSH(r3) 
LEA(r3,palabra_coinc3)
PUSH(r3) 
LEA(r3,CoincidenCad)

jsr(r3)
POP(r3)
POP(r3)
POP(r1)

jmp(r1)



org 7000 ;-------------PROGRAMA--------------


START:

LEA(r30, r30_inicio)

or r4 ,r0,4
or r5 ,r0,5
or r6, r0,6
or r7, r0,7
or r8 ,r0,8
or r9, r0,9
or r10, r0,10
or r11, r0,11
or r12 ,r0,12
or r13 ,r0,13
or r14, r0,14
or r15, r0,15
or r16 ,r0,16
or r17 ,r0,17
or r18, r0,18
or r19, r0,19
or r20 ,r0,20
or r21, r0,21
or r22, r0,22
or r23, r0,23

PUSH(r3)
PUSH(r1)

BREAK:

bsr TBUSCCAR4

POP(r1)
POP(r3)


;BREAK: or r5, r5, r5



