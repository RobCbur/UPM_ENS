org 496 ; ------------------------VARIABLES TEST-----------------------------

	n_bit0: data 0

	n_bit1: data 1

	n_bit2: data 2


	n_bit4: data 4

	n_bit7: data 7


	n_bit8: data 8

	n_bit32: data 32

	n_bit44: data 44

	n_bit122: data 122

	res 12


	campo_bits: data 0x00

	res  28

	r30_inicio: data 86000

	res 12

	palabra_loncad1: data "abzxqwyunl" ; size 10 (A)

	res 12

	palabra_longad2: data 0x00; 0

	res 4



	palabra_buscacar: data "*qwe*rt--y\0"

	res 4

	plabra_buscacar2: data 0x6577712A ,0x2D74722A , 0x00A02D

	res 4

	;palabra_buscacar3: data "*aze*rt--y\0"

	palabra_busca3: data "a*ze*rt--y\0"


	res 4

	palabra_coincidencad1:data "qwerty"

	res 8

	palabra_coincad2:data "azerty" 

	res 8

	palabra_coinc3:data "qwerti"

	res 8
	;;;;;;;;;;;;;;;;;;;;;;;
	c_buscacar1: data "*"

	res 12

	c_buscacar2: data "|"

	res 12

	c_buscacar3: data 0xA0

	res 12
	c_buscacar4: data "y"

	res 12

	c_buscacar5: data "a"

	res 12
	;;;;;;;;;;;;;;;;;;;;;;;;;

	from_buscacar1: data 0

	res 12

	to_buscacar1: data 10

	res 12
	;;;;;;;;;;;;;;;;

	from_buscacar2:data 3

	res 12

	to_buscacar2: data 10

	res 12

	;;;;;;;;;;;;;;;;;;;;
	from_buscacar3:data 5

	res 12

	to_buscacar3: data 5

	res 12

	;;;;;;;;;;;;;;;;;;;;;

	from_buscacar4:data 0

	res 12

	to_buscacar4: data 7

	res 28

	palabra_comp1: data "0123456789\0Z"
	data "////"

	comprimido_1: res 16

	data "////////////////"

	decomprimido_1:res 16



	data "////////////////"

	palabra_comp2: data "0123456789abcdefghij\0"

	data "////////"


	comprimido_2: res 32

	data "////////////////"

	decomprimido_2:res 20
	data "////////////////"

	palabra_comp3:data "1234abcd1234abcd2312fghixxxx34ab\0"

	data "////////////"




	comprimido_3: res 48


	data "////////////////"

	decomprimido_3:res 32

	data "////////////"


	palabra_comp4: data "tres tristes tigres comen trigo en un trigal, el primer tigre que...\0"
	data "////////"

	comprimido_4: res 96

	data "////////////////"

	decomprimido_4:res 68
	data "////////////////"

	palabra_comp5: data "0123456789012345678901234567890123456789\0"
	data "////"

	comprimido_5: res 32

	data "////////////////"

	decomprimido_5:res 48

	palabra_comp6: data "01234567812345\0"
	data "////////////////"

	comprimido_6: res 16


	data "////////////"

	decomprimido_6:res 16

	data"////////////////"


	



	

	

org 4000 
	res 16
	palabra_longcad3: data "0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF" ;0x100


org 6000 ;--------------------------MACROS Y SUBRUTINAS---------------------------------
	;----MACROS-----

	DBNZ: MACRO (ra,eti)
	    sub ra,ra,1
	    cmp r4,ra,0
	    bb0 2,r4,eti
	ENDMACRO

	LEA: MACRO (ra, eti)
	    or ra, r0, low(eti)
	    or.u ra, ra, high(eti)
	ENDMACRO


	LOAD: MACRO (ra, eti)
	    LEA (ra, eti)
	    ld ra, ra, r0
	ENDMACRO


	POP: MACRO(ra)
	    ld ra,r30,0
	    st r0 ,r30,r0
	    add r30,r30,4
	ENDMACRO

	PUSH: MACRO (ra)
	    sub r30,r30,4
	    st ra,r30,0
	ENDMACRO


	;----SUBRUTINAS-----


	LongCad:

		PUSH(r1)            ; Guarda dirección de retorno
		PUSH(r3)            ; Guarda r3 (contador)
		PUSH(r4)            ; Guarda r4 (registro temporal para comparación)
		PUSH(r11)           ; Guarda r11 (puntero de la cadena)
		PUSH(r12)           ; Guarda r12 (temporal para cargar caracteres)
		PUSH(r31)           ; Guarda marco de pila anterior

		xor r4, r4, r4      ; Inicializa r4 a 0 para comparación
		xor r3, r3, r3      ; Inicializa r3 a 0, este será el contador de la longitud
		xor r11, r11, r11   ; Inicializa r11 a 0 (se usará como puntero)
		xor r12, r12, r12   ; Inicializa r12 a 0 para caracteres de la cadena

		or r31, r30, 0      ; Guarda el marco actual de pila en r31

		ld r11, r31, 24     ; Carga la dirección de inicio de la cadena en r11
		subu r11, r11, 4    ; Desplaza el puntero 4 bytes hacia atrás para iniciar lectura
		subu r3, r3, 4      ; Configura el contador para leer palabras de 4 bytes



		; Bucle para procesar palabras de 4 bytes
		addu r3, r3, 4      ; Incrementa el contador en 4 bytes
		addu r11, r11, 4    ; Mueve el puntero al siguiente bloque de 4 bytes
		ld r12, r11, 0      ; Carga la palabra actual de la cadena en r12
		cmp r4, r12, r0     ; Compara si la palabra contiene un byte nulo
		bb0 12, r4, -4      ; Si no hay byte nulo, sigue a la siguiente palabra


		subu r3, r3, 1      ; Ajusta el contador para leer los caracteres finales
		subu r11, r11, 1    ; Ajusta el puntero para comenzar el bucle de caracteres


		; Bucle para procesar caracteres individuales
		addu r3, r3, 1      ; Incrementa el contador
		addu r11, r11, 1    ; Avanza el puntero de un byte
		ld.bu r12, r11, 0   ; Carga un byte de la cadena
		cmp r4, r12, r0     ; Compara el byte con 0
		bb0 2, r4, -4       ; Si encuentra el terminador, sale del bucle

		or r29, r3, r0      ; Guarda la longitud calculada en r29
		or r30, r31, r0     ; Restaura el marco de pila

		; Restaura los registros y vuelve

		POP(r31)
		POP(r12)
		POP(r11)
		POP(r4)
		POP(r3)

		POP(r1)
		jmp(r1)



	BuscaCar:

		PUSH(r1)            ; Guarda dirección de retorno en la pila
		PUSH(r31)           ; Guarda el marco de pila anterior
		PUSH(r3)            ; Guarda r3 (contador de coincidencias)
		PUSH(r11)           ; Guarda r11 (puntero de la cadena)
		PUSH(r4)            ; Guarda r4 (registro de comparación)
		PUSH(r6)            ; Guarda r6 (registro temporal para tamaño)
		PUSH(r5)            ; Guarda r5 (carácter a buscar)
		PUSH(r12)           ; Guarda r12 (temporal para cargar caracteres)
		PUSH(r7)            ; Guarda r7 (temporal para controlar el final)

		; Inicializa los registros necesarios para la búsqueda
		xor r7, r7, r7      ; Inicializa r7 a 0 (usado para comparación de tamaño)
		xor r5, r5, r5      ; Inicializa r5 a 0 (carácter a buscar)
		xor r3, r3, r3      ; Inicializa r3 a 0 (contador de ocurrencias)
		xor r11, r11, r11   ; Inicializa r11 a 0 (puntero de la cadena)
		xor r4, r4, r4      ; Inicializa r4 a 0 (registro temporal para comparación)
		xor r12, r12, r12   ; Inicializa r12 a 0 (registro temporal para el carácter actual)

		or r31, r30, 0      ; Guarda el marco actual de pila en r31

		ld r5, r31, 36      ; Carga en r5 el carácter a buscar
		ld r11, r31, 40    ; Carga en r11 la dirección de inicio de la cadena
		ld r4, r31, 44      ; Carga en r4 y r3 el from
		ld r3, r31, 44
		ld r7, r31, 48      ; Carga en r7 el to

		addu r11, r11, r4   ; Ajusta el puntero r11 para empezar a recorrer la cadena 


		; Configura r3 y r11 para el inicio de la búsqueda
		subu r11, r11, 1    ; Mueve el puntero r11 una posición hacia atrás
		subu r3, r3, 1      ; Configura el contador en r3


		; Bucle para recorrer cada carácter de la cadena
		buc: addu r3, r3, 1      ; Incrementa el contador de ocurrencias
		addu r11, r11, 1    ; Avanza el puntero de la cadena

		ld.bu r12, r11, 0   ; Carga el carácter actual de la cadena en r12

		cmp r4, r7, r3 

		bb1 2, r4,fin_nenc

		cmp r4, r12, r0     ; Compara r12 con 0 para ver si es el final de la cadena

		bb1 2, r4,fin_nenc

		cmp r4, r12, r5     ; Compara r12 (carácter actual) con r5 (carácter buscado)

		bb0 2, r4, buc


		or r29, r3, r0      ; Guarda el total de coincidencias en r29

		br exit

		fin_nenc:
		
		or r29, r7, r0      ; Guarda el total de coincidencias en r29

		exit:

		or r30, r31, 0      ; Restaura el marco de pila

		; Restaura los registros y vuelve
		POP(r7)
		POP(r12)
		POP(r5)
		POP(r6)
		POP(r4)
		POP(r11)
		POP(r3)
		POP(r31)

		POP(r1)
		jmp(r1)



	CoincidenCad:  ;31,32

		PUSH(r1)            ; Guarda dirección de retorno
		PUSH(r31)           ; Guarda marco de pila anterior
		PUSH(r3)            ; Guarda r3 (contador)
		PUSH(r11)           ; Guarda r11 (puntero de la primera cadena)
		PUSH(r4)            ; Guarda r4 (registro de comparación)
		PUSH(r12)           ; Guarda r12 (puntero de la segunda cadena)
		PUSH(r21)           ; Guarda r21 (temporal para cargar de la primera cadena)
		PUSH(r22)           ; Guarda r22 (temporal para cargar de la segunda cadena)
		PUSH(r5)            ; Guarda r5 (registro de coincidencias)


		xor r5, r5, r5      ; Inicializa r5 a 0 (registro de coincidencias)
		xor r3, r3, r3      ; Inicializa r3 a 0 (contador de coincidencias)
		xor r11, r11, r11   ; Inicializa r11 a 0 (puntero de la primera cadena)
		xor r4, r4, r4      ; Inicializa r4 a 0 (comparación)
		xor r12, r12, r12   ; Inicializa r12 a 0 (puntero de la segunda cadena)
		xor r21, r21, r21   ; Inicializa r21 a 0 (temporal de primera cadena)
		xor r22, r22, r22   ; Inicializa r22 a 0 (temporal de segunda cadena)

		or r31, r30, 0      ; Guarda el marco actual de pila en r31

		ld r11, r31, 40     ; Carga la dirección de la primera cadena en r11
		ld r12, r31, 36     ; Carga la dirección de la segunda cadena en r12
		subu r11, r11, 1    ; Ajusta el puntero de la primera cadena
		subu r12, r12, 1    ; Ajusta el puntero de la segunda cadena
		subu r3, r3, 1      ; Configura el contador


		; Bucle de comparación de caracteres
		addu r3, r3, 1      ; Incrementa el contador
		addu r12, r12, 1    ; Avanza el puntero de la segunda cadena
		addu r11, r11, 1    ; Avanza el puntero de la primera cadena
		ld.bu r21, r11, 0   ; Carga un byte de la primera cadena en r21
		ld.bu r22, r12, 0   ; Carga un byte de la segunda cadena en r22
		cmp r4, r21, r22    ; Compara los bytes de ambas cadenas
		cmp r5, r21, r0     ; Compara el byte con 0
		bb0 2, r4, 2        ; Si los caracteres no coinciden, termina el bucle
		bb0 2, r5, -8       ; Si se encuentra el fin de cadena, termina el bucle


		or r29, r3, r0      ; Guarda la cantidad de coincidencias en r29
		or r30, r31, r0     ; Restaura el marco de pila

		; Restaura los registros y vuelve
		POP(r5)
		POP(r22)
		POP(r21)
		POP(r12)
		POP(r4)
		POP(r11)
		POP(r3)
		POP(r31)

		POP(r1)
		jmp(r1)



	;
	; Debe incorporar este fichero con TODAS sus líneas, sin modificar
	; ninguna de ellas, al final de su archivo CDV24.ens
	;
	; Este aviso se refiere también a las líneas de comentario
	; 
	;
	;; Grupo:    230078 - Mon Oct 28 20:39:49 CET 2024

	BuscaMax:
			PUSH (r1)

			PUSH (r31)





			or   r31, r30, 0
			or   r28, r0, 0x336B
			PUSH (r28)

			ld   r10, r31, 8;  REF
			ld   r11, r31, 12; MAX
			ld   r12, r31, 16; Dir(JJ)

			sub  r5, r0, 1		; guarda -1 en *JJ por si no se
			st   r5, r12, 0		; encuentran coincidencias

			addu r27, r0, r0  ; P
			addu r28, r0, r0  ; L

		BucBM:
			ld.bu r20, r10, r11	; C=REF(max)

						; Reserva registros que
						; necesita conservar
			PUSH (r28) 	    	; L
			PUSH (r11)	    	; MAX

								; Parámetros de BuscaCar
			PUSH (r27)	    	; P
			PUSH (r10)	    	; REF
			PUSH (r20)	   	; C
			bsr  BuscaCar
			POP  (r20)
			POP  (r10)
			POP  (r27)

			POP  (r11)		; Recupera registros
			POP  (r28)	        ; salvaguardados

			cmp  r5, r29, r11	; nuevo P es >= MAX ??
			bb1  hs, r5, finBM
			addu r27, r29, r0	; P = nuevo P

			addu r13, r10, r27	; *REF(P)
			addu r14, r10, r11 	; *REF(max)	

			PUSH (r11)     		; Reserva registros que
			PUSH (r10)		; necesita conservar
			PUSH (r28)
			PUSH (r27)

			PUSH (r14)		; Parámetros de CoincidenCad
			PUSH (r13)
			bsr  CoincidenCad
			POP  (r13)
			POP  (r14)

			POP  (r27)		; Recupera registros
			POP  (r28)		; salvaguardados
			POP  (r10)
			POP  (r11)

			cmp r5, r29, r28	; Comprueba si longitud > L
			bb1 le, r5, contBM	; Si no lo es, continúa
			cmp r5, r29, 255	; Comprueba si longitud > 255
			bb1 le, r5, noLimBM	; Si no lo es, continúa
			addu r29, r0, 255	; Si lo es, limita su valor a 255

		noLimBM:
			addu r28, r29, r0	; actualiza L
			ld   r12, r31, 16	; Dir(JJ)
			st   r27, r12, r0	; actualiza P en *JJ
			bb1 ge, r5, finBM	; Si coincidencia >= 255 termina
		contBM: 
			addu r27, r27, 1	; Pasa al siguiente carácter
			cmp  r5, r27, r11	; Es P>=max ?
			bb1  hs, r5, finBM

			br   BucBM   		; Nueva búsqueda del primer carácter

		finBM:
			addu r29, r28, r0	; asigna L al valor de retorno r29

			or   r27, r0, 0xA7C
			POP  (r28)

			or   r30, r31, 0
			POP  (r31)
			POP  (r1)
			jmp  (r1)
		;; Grupo:    230078


	PoneBitA1:
		PUSH(r1)

		PUSH(r21)
		PUSH(r20)
		PUSH(r5)
		PUSH(r6)
		PUSH(r7)
		PUSH(r8)
		PUSH(r31)


		xor r21, r21, r21
		xor r20, r20, r20
		xor r5, r5, r5
		xor r6, r6, r6
		xor r7,r7,r7
		xor r8,r8,r8

		or r31, r30, 0

		ld r20, r31, 32 ; guarda en r20 dir inicio
		or r21, r0, 7 ; guarda en r21 num 7
		ld r5, r31, 36; guarda en r5 n_bit


		divu r6 , r5, 8 ;  pon en r6 el byte en l q hay q escribir

		ld.bu r7, r20, r6 ; guarda en r7 el byte a escribir


		mulu r8 , r6, 8
		subu r8, r5, r8 ; guarda en r8 r5 mod 8

		sub r8, r21, r8 ; hace 7 - r8 para empezar por la izquierda


		set r8, r8, 1<5> ; pone un 1 al bit 5 de r8
		set r7, r7 ,r8 ; pone a 1 un campo de bits de longitud 1 y de desplazamiento r8 en r7

		st.b r7, r20 , r6 ; guarda el byte cambiado a memoria


		or r30, r31, 0

		POP(r31)
		POP(r8)
		POP(r7)
		POP(r6)
		POP(r5)
		POP(r20)
		POP(r21)

		POP(r1)
		jmp(r1)





	LeeBit:
		PUSH(r1)

		PUSH(r21)
		PUSH(r20)
		PUSH(r5)
		PUSH(r6)
		PUSH(r7)
		PUSH(r8)
		PUSH(r31)



		xor r21, r21, r21
		xor r20, r20, r20
		xor r5, r5, r5
		xor r6, r6, r6
		xor r7,r7,r7
		xor r8,r8,r8

		or r31, r30, 0

		ld r20, r31, 32 ; guarda en r20 dir inicio
		or r21, r0, 7 ; guarda en r21 num 7
		ld r5, r31, 36; guarda en r5 n_bit


		divu r6 , r5, 8 ;  pon en r6 el byte en l q hay q leer

		ld.bu r7, r20, r6 ; guarda en r7 el byte a leer


		mulu r8 , r6, 8
		subu r8, r5, r8 ; guarda en r8 r5 mod 8

		sub r8, r21, r8 ; hace 7 - r8 para empezar por la izquierda


		set r8, r8, 1<5> ; pone un 1 al bit 5 de r8
		extu r29, r7 ,r8 ; pone a 1 un campo de bits de longitud 1 y de desplazamiento r8 en r7


		or r30, r31, 0

		POP(r31)
		POP(r8)
		POP(r7)
		POP(r6)
		POP(r5)
		POP(r20)
		POP(r21)

		POP(r1)
		jmp(r1)

	Comprime:




		PUSH(r1)
		PUSH(r31)
		PUSH(r2)
		PUSH(r3)
		PUSH(r4)
		PUSH(r8)
		PUSH(r9)
		PUSH(r10)
		PUSH(r11)
		PUSH(r12)
		PUSH(r13)
		PUSH(r14)
		PUSH(r17)
		PUSH(r18)
		PUSH(r19)
		PUSH(r20)
		PUSH(r21)
		PUSH(r22)
		PUSH(r23)
		PUSH(r24)
		PUSH(r26)
		PUSH(r27)


		or r31, r30, 0



		ld r20,r31,88;texto
		ld r19, r31,92 ;comprimido
		xor r9,r9,r9
		xor r26,r26,r26
		addu r22,r19,5 ; inicio campo de bits

		PUSH(r20)

		bsr LongCad

		POP(r20)
		or r2,r0,r29
		;or r3, r0 ,1
		;st.h r29,r19,0
		;st.b r3,r19,16

		bb1 0, r29,2

		bb0 1,r29,4

		divu r29,r29,4
		addu r29,r29,1
		mulu r29,r29,4

		subu r30,r30,r29

		or r10, r30,0 ; pilazona3 
		or r11, r30,0 ; pilazona3 puntero

		subu r30,r30,r29

		or r9, r30,0 ; dir(p) var local 

		;subu r30,r30,1

		xor r12,r12,r12 ; nbit
		xor r13,r13,r13 ; desplazamiento txt
		xor r14,r14,r14;nbytes
		or r8, r0,8


		BUC_CopiaM:

		ld.bu r21,r20,r13 ;cargar caracter
		st.b r21,r11,r0
		addu r11,r11,1
		addu r13,r13,1
		addu r26,r26,1

		DBNZ(r8,BUC_CopiaM)

	
		Buc_Main_Comp:

		;si es mul 8 nbit a 0 y nbyte++
		cmp r4,r12,r0

		bb1 eq , r4, 6

		bb1 0, r12,5

		bb1 1,r12,4

		bb1 2,r12,3

		xor r12,r12,r12 
		addu r14,r14,1

		;llama buscamax





		PUSH(r5)
		PUSH(r10)
		PUSH(r11)
		PUSH(r12)
		PUSH(r13)
		PUSH(r14)
		PUSH(r27)
		PUSH(r28)
		PUSH(r24)
		PUSH(r26)
		

		;LEA(r9,jj_buscamax)

		PUSH(r9)

		PUSH(r13)
		PUSH(r20)


		bsr BuscaMax

		POP(r20)

		POP(r13)
		POP(r9)

		

		POP(r26)
		POP(r24)

		POP(r28)
		POP(r27)

		POP(r14)
		POP(r13)
		POP(r12)
		POP(r11)
		POP(r10)
		POP(r5)





		ld r24,r9,r0
		;LOAD(r9,jj_buscamax)
		cmp r4, r24,-1
		bb1 eq,r4,3

		cmp r4, r29,4
		bb0 lo,r4,compresion

		ld.bu r21,r20,r13 ;cargar caracter
		st.b r21,r11,r0
		addu r11,r11,1
		addu r13,r13,1
		addu r12,r12,1
		addu r26,r26,1

		br fin_compresion

		compresion:



		addu r23,r22,r14

		;subu r23,r23,1



		PUSH(r12)
		PUSH(r23)


		bsr PoneBitA1

		POP(r23)
		POP(r12)




		st.b r24,r11,r0
		addu r11,r11,1
		rot r24,r24,<8>
		st.b r24,r11,r0
		rot r24,r24,<24>
		addu r11,r11,1
		st.b r29,r11,r0
		addu r11,r11,1
		addu r13,r13,r29
		addu r12,r12,1
		addu r26,r26,3

		fin_compresion:



		cmp r4,r13,r2




		bb1 lo,r4,Buc_Main_Comp


		st.h r2,r19,r0  ;guarda long cad



		or r3,r0,1		;guarda M(1)
		st.b r3,r19,2

		

		cmp r4,r12,r0 ; redondea a la alta n bytes

		bb1 eq ,r4 ,2

		addu r14,r14,1

		addu r17,r14,5 ;suma a long camp bits 5 por la cabecera



		addu r29,r17,r26 ; guarda longitud al completo



		st.b r17,r19,3

		rot r17,r17,<8>
		st.b r17,r19,4
		rot r17,r17,<24> ;guarda longitud campo de bits + cabecera



		or r11,r10,0 ;puntero zona pila 3
		or r18,r17,0 ;puntero fin campo de bits
		or r27,r26,r0

		BUC_FIN_COMPRIM:
		ld.b r3,r11,r0
		st.b r3,r19,r18

		addu r18,r18,1
		addu r11,r11,1
		

		DBNZ(r27,BUC_FIN_COMPRIM)
		;cmp r4,r11,r31
		;bb0 eq,r4,-5







		or r30, r31, 0

		POP(r27)

		POP(r26)

		POP(r24)
		POP(r23)
		POP(r22)
		POP(r21)
		POP(r20)
		POP(r19)
		POP(r18)
		POP(r17)
		POP(r14)
		POP(r13)
		POP(r12)
		POP(r11)
		POP(r10)
		POP(r9)
		POP(r8)
		POP(r4)
		POP(r3)
		POP(r2)
		POP(r31)


		POP(r1)
		jmp(r1)

	Descomprime:
		PUSH(r1)
		PUSH(r31)

		PUSH(r2)
		PUSH(r4)
		PUSH(r5)
		PUSH(r6)
		PUSH(r7)
		PUSH(r8)
		PUSH(r9)
		PUSH(r10)
		PUSH(r11)
		PUSH(r12)
		PUSH(r13)
		PUSH(r14)
		PUSH(r20)
		PUSH(r21)
		PUSH(r22)
		PUSH(r25)		

		or r31, r30, 0


		xor r2,r2,r2 ;contador decomprimido

		ld r6,r31,76 ;descomprimido
		ld r5,r31,72 ;comprimido

		ld.bu r7,r5,2 ;M(1)


		ld.bu r8,r5,4
		rot r8,r8,<24>
		ld.bu r8,r5,3 ;cabecera + mapabits
		ld.h r9,r5,0 ;long cad decomp


		subu r25,r8,5 ;longitud mapabits(temporal)
		mulu r25,r25,8

		mulu r12,r7,8

		or r10,r6,r0 ;puntero descomprimido
		or r11,r5,r0 ;puntero comprimido(texto)
		addu r11,r11,r8

		BUC_DEComp:

		ld.bu r13,r11,0
		st.b r13,r10,0
		addu r10,r10,1
		addu r11,r11,1
		addu r2,r2,1

		DBNZ(r12,BUC_DEComp)

		addu r12,r5,5 ;dir mapa bit
		xor r14,r14,r14;n bit a mirar

		Buc_Main_DEComp:

		PUSH(r14)
		PUSH(r12)

		bsr LeeBit

		POP(r12)
		POP(r14)

		bb1 0,r29,decomprime

		ld.bu r13,r11,0
		st.b r13,r10,0
		addu r10,r10,1
		addu r11,r11,1
		addu r2,r2,1
		addu r14,r14,1

		br decomprime_fin
		decomprime:


		ld.b r20,r11,1
		rot r20,r20,<24>
		ld.b r20,r11,0  ;inicio de la subcadena a copiar

		ld.b r21, r11,2 ;longitud subcadena

		addu r22, r6,r20 ; puntero de la subcadena


		BUC_COPIARCOMP:

		ld.bu r13,r22,0
		st.b r13,r10,0
		addu r22,r22,1
		addu r10,r10,1
		addu r2,r2,1


		DBNZ(r21,BUC_COPIARCOMP)

		;or r13,r0,0xaf
		;ld.bu r13,r11,0
		;st.b r13,r10,0
		;addu r10,r10,1
		addu r11,r11,3
		;addu r2,r2,1
		addu r14,r14,1

		decomprime_fin:


	
		cmp r4, r2, r9
			
		bb1 lo,r4,Buc_Main_DEComp

	

		st.b r0,r10,0
		or r29,r2,r0
		or r30, r31, 0



		POP(r25)
		POP(r22)
		POP(r21)
		POP(r20)
		POP(r14)
		POP(r13)
		POP(r12)
		POP(r11)
		POP(r10)
		POP(r9)
		POP(r8)
		POP(r7)
		POP(r6)
		POP(r5)
		POP(r4)
		POP(r2)

		POP(r31)
		POP(r1)
		jmp(r1)

	Verifica:
		PUSH(r1)
		POP(r31)

		PUSH(r4)
		PUSH(r5)
		PUSH(r6)
		PUSH(r7)
		PUSH(r8)
		PUSH(r9)
		PUSH(r10)
		PUSH(r14)

		or r31,r30,r0

		or r5, r31, 8 ; direccion txt
		or r6, r31,12 ;direaccopm long 1
		or r7, r31,16 ; direccion long 2

		PUSH(r5)

		bsr LongCad

		POP(r5)

		

		cmp r4,r29,r0

		bb1 eq ,r4, es_0

		st r29,r6,0

		or r9, r29,r0 ; copia long cad
		or r14, r29,r0;copia long cad para luego
		divu r10, r29,8 ; guarda long cad /8

		cmp r4,r9,r0

		
		bb1 0, r9,  3
		bb1 1, r9,  2
		bb0 2, r9,  2

		addu r10,r10,1

		addu r8 , 5,r9 ; sumador de long comprimido
		addu r8,r10

		bb1 0 , r8,2
		bb0 1, r8 ,4

		divu r8,r8,4
		mulu r8,r8,4

		addu r8,r8,1



	
		subu r30,r30,r8
		or r8,r30,r0 ; reserva espacio en la pila para el texto comprimido y lo pone en r8

		bb1 0 , r9,2
		bb0 1, r9 ,2

		divu r9,r9,4
		mulu r9,r9,4
		addu r9,r9,1

		subu r30,r30,r9
		or r9,r30,r0 ; reserva espacio en la pila para el texto descomprimido y lo pone en r9


		PUSH(r8)
		PUSH(r5)

		bsr Comprime

		POP(r5)
		POP(r8)

		PUSH(r9)
		PUSH(r8)

		bsr Descomprime

		POP(r8)
		POP(r9)


		cmp r4, 29,r14

		bb1 eq,r4,2
		or r29,r0,-1
		brn final_verifica

		PUSH(r9)
		PUSH(r5)

		bsr CoincidenCad

		POP(r5)
		POP(r9)

		cmp r4, r29,r14

		bb1 eq,r4,2

		or r29,r29,-2

		br final_verifica

		or r29,r29,0

		br final_verifica

		es_0:
		
		xor r29,r29,r29
		st r29,r6,0
		st r29,r7,0

		br final_verifica

		

		final_verifica:
		or r30,r31,0


		POP(r14)
		POP(r10)
		POP(r9)
		POP(r8)
		POP(r7)
		POP(r6)
		POP(r5)
		POP(r4)
		

		POP(r31)
		POP(r1)
		jmp(r1)



org 10000 ; -----------------------------TESTS--------------------------------



	TCOMPRIME1:PUSH(r1) ; 0x10
	LEA(r20,comprimido_1)
	PUSH(r20)
	LEA(r20, palabra_comp1)
	PUSH(r20)
	

	bsr Comprime

	POP(r20)
	POP(r20)
	POP(r1)
	jmp(r1)

	TCOMPRIME2:PUSH(r1) ; 0x10
	LEA(r20,comprimido_2)
	PUSH(r20)
	LEA(r20, palabra_comp2)
	PUSH(r20)
	
	bsr Comprime

	POP(r20)
	POP(r20)
	POP(r1)
	jmp(r1)

	TCOMPRIME3:PUSH(r1) ; 0x10
		LEA(r20,comprimido_3)
	PUSH(r20)
	LEA(r20, palabra_comp3)
	PUSH(r20)

	bsr Comprime

	POP(r20)
	POP(r20)
	POP(r1)
	jmp(r1)


	TCOMPRIME4:PUSH(r1) ; 0x10
	LEA(r20,comprimido_4)
	PUSH(r20)
	LEA(r20, palabra_comp4)
	PUSH(r20)
	

	bsr Comprime

	POP(r20)
	POP(r20)
	POP(r1)
	jmp(r1)


	TCOMPRIME5:PUSH(r1) ; 0x10
		LEA(r20,comprimido_5)
	PUSH(r20)

	LEA(r20, palabra_comp5)
	PUSH(r20)

	bsr Comprime

	POP(r20)
	POP(r20)
	POP(r1)
	jmp(r1)


	TCOMPRIME6:PUSH(r1) ; 0x10
	LEA(r20,comprimido_6)
	PUSH(r20)

	LEA(r20, palabra_comp6)
	PUSH(r20)

	bsr Comprime

	POP(r20)
	POP(r20)
	POP(r1)
	jmp(r1)





	TLONGCA1:PUSH(r1) ; 0x10
	LEA(r20, palabra_loncad1)
	PUSH(r20)

	bsr LongCad

	POP(r20)
	POP(r1)
	jmp(r1)


	TLONGCA2:PUSH(r1) ;0x 00
	LEA(r20, palabra_longad2)
	PUSH(r20)

	bsr LongCad

	POP(r20)
	POP(r1)
	jmp(r1)


	TLONGCA3:PUSH(r1) ;0x 01 00
	LEA(r20, palabra_longcad3)
	PUSH(r20)

	bsr LongCad


	POP(r20)
	POP(r1)
	jmp(r1)



	TBUSCCAR1:PUSH(r1) ; 0x00
	LOAD(r20,c_buscacar1)
	PUSH(r20) 
	LEA(r20,palabra_buscacar)
	PUSH(r20) 
	LOAD(r20,from_buscacar1)
	PUSH(r20) 
	LOAD(r20,to_buscacar1)
	PUSH(r20) 

	bsr BuscaCar

	POP(r20)
	POP(r20)
	POP(r20)
	POP(r20)
	POP(r1)
	jmp(r1)





	TBUSCCAR2:PUSH(r1) ;0x4
	 LOAD(r20,c_buscacar1)
	PUSH(r20) 
	LEA(r20,palabra_buscacar)
	PUSH(r20) 
	LOAD(r20,from_buscacar2)
	PUSH(r20) 
	LOAD(r20,to_buscacar2)
	PUSH(r20) 

	bsr BuscaCar

	POP(r20)
	POP(r20)
	POP(r20)
	POP(r20)
	POP(r1)

	jmp(r1)




	TBUSCCAR3:PUSH(r1) ;0xA
	 LOAD(r20,c_buscacar2)
	PUSH(r20) 
	LEA(r20,palabra_buscacar)
	PUSH(r20) 
	LOAD(r20,from_buscacar1)
	PUSH(r20) 
	LOAD(r20,to_buscacar1)
	PUSH(r20) 


	bsr BuscaCar

	POP(r20)
	POP(r20)
	POP(r20)
	POP(r20)
	POP(r1)

	jmp(r1)

	TBUSCCAR4:PUSH(r1) ;0xA
	 LOAD(r20,c_buscacar3)
	PUSH(r20) 
	LEA(r20,plabra_buscacar2)
	PUSH(r20) 
	LOAD(r20,from_buscacar1)
	PUSH(r20) 
	LOAD(r20,to_buscacar1)
	PUSH(r20) 


	bsr BuscaCar

	POP(r20)
	POP(r20)
	POP(r20)
	POP(r20)
	POP(r1)

	jmp(r1)

	TBUSCCAR5:PUSH(r1) ;0xA
	 LOAD(r20,c_buscacar1)
	PUSH(r20) 
	LEA(r20,plabra_buscacar)
	PUSH(r20) 
	LOAD(r20,from_buscacar3)
	PUSH(r20) 
	LOAD(r20,to_buscacar3)
	PUSH(r20) 


	bsr BuscaCar

	POP(r20)
	POP(r20)
	POP(r20)
	POP(r20)
	POP(r1)

	jmp(r1)

	TBUSCCAR6:PUSH(r1) ;0xA
	 LOAD(r20,c_buscacar4)
	PUSH(r20) 
	LEA(r20,plabra_buscacar)
	PUSH(r20) 
	LOAD(r20,from_buscacar4)
	PUSH(r20) 
	LOAD(r20,to_buscacar4)
	PUSH(r20) 


	bsr BuscaCar

	POP(r20)
	POP(r20)
	POP(r20)
	POP(r20)
	POP(r1)

	jmp(r1)

	TBUSCCAR7:PUSH(r1) ;0xA
	 LOAD(r20,c_buscacar5)
	PUSH(r20) 
	LEA(r20,palabra_busca3)
	PUSH(r20) 
	LOAD(r20,from_buscacar1)
	PUSH(r20) 
	LOAD(r20,to_buscacar1)
	PUSH(r20) 


	bsr BuscaCar

	POP(r20)
	POP(r20)
	POP(r20)
	POP(r20)
	POP(r1)

	jmp(r1)




	TCC1: PUSH(r1);0x06
	LEA(r20,palabra_coincidencad1)
	PUSH(r20) 
	LEA(r20,palabra_coincidencad1)
	PUSH(r20) 

	bsr CoincidenCad

	POP(r20)
	POP(r20)
	POP(r1)

	jmp(r1)


	TCC2:PUSH(r1) ;0x00
	LEA(r20,palabra_coincidencad1)
	PUSH(r20) 
	LEA(r20,palabra_coincad2)
	PUSH(r20) 

	bsr CoincidenCad

	POP(r20)
	POP(r20)
	POP(r1)

	jmp(r1)



	TCC3:PUSH(r1) ;0x05
	LEA(r20,palabra_coincidencad1)
	PUSH(r20) 
	LEA(r20,palabra_coinc3)
	PUSH(r20) 

	bsr CoincidenCad

	POP(r20)
	POP(r20)
	POP(r1)

	jmp(r1)


	TPB1: PUSH(r1)

	LOAD(r20,n_bit0)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1

	POP(r20)
	POP(r20)


	POP(r1)
	jmp(r1)


	TPB2: PUSH(r1)

	LOAD(r20,n_bit0)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1

	POP(r20)
	POP(r20)

	LOAD(r20,n_bit1)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1

	POP(r20)
	POP(r20)


	POP(r1)
	jmp(r1)


	TPB3: PUSH(r1)

	LOAD(r20,n_bit4)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1

	POP(r20)
	POP(r20)


	POP(r1)
	jmp(r1)

	TPB4: PUSH(r1)

	LOAD(r20,n_bit8)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1

	POP(r20)
	POP(r20)

	LOAD(r20,n_bit0)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1

	POP(r20)
	POP(r20)

	POP(r1)
	jmp(r1)


	TPB5: PUSH(r1)

	LOAD(r20,n_bit0)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1

	POP(r20)
	POP(r20)

	LOAD(r20,n_bit7)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1

	POP(r20)
	POP(r20)

	POP(r1)
	jmp(r1)

	TPB6: PUSH(r1)

	LOAD(r20,n_bit32)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1

	POP(r20)
	POP(r20)


	POP(r1)
	jmp(r1)



	TPB7: PUSH(r1)

	LOAD(r20,n_bit32)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1

	POP(r20)
	POP(r20)

	LOAD(r20,n_bit44)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1

	POP(r20)
	POP(r20)

	POP(r1)
	jmp(r1)


	TPB8: PUSH(r1)

	LOAD(r20,n_bit122)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1

	POP(r20)
	POP(r20)


	POP(r1)
	jmp(r1)

	TPB9: PUSH(r1)

	LOAD(r20,n_bit32)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1

	POP(r20)
	POP(r20)

	LOAD(r20,n_bit44)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1

	POP(r20)
	POP(r20)



	LOAD(r20,n_bit122)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1

	POP(r20)
	POP(r20)

	LOAD(r20,n_bit44)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1

	POP(r20)
	POP(r20)


	POP(r1)
	jmp(r1)

	TLB1:

	PUSH(r1)

	LOAD(r20,n_bit0)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1


	bsr LeeBit

	POP(r20)
	POP(r20)


	POP(r1)
	jmp(r1)

	TLB2:

	PUSH(r1)

	LOAD(r20,n_bit0)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1



	LOAD(r20,n_bit1)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1


	LOAD(r20,n_bit4)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1


	bsr LeeBit
	addu r28,r28,r29

	POP(r20)
	POP(r20)

	bsr LeeBit
	addu r28,r28,r29


	POP(r20)
	POP(r20)

	bsr LeeBit
	addu r28,r28,r29


	POP(r20)
	POP(r20)





	POP(r1)
	jmp(r1)


	TLB3:

	PUSH(r1)

	LOAD(r20,n_bit0)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1



	LOAD(r20,n_bit1)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1


	LOAD(r20,n_bit4)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1


	bsr LeeBit
	addu r28,r28,r29

	POP(r20)
	POP(r20)

	bsr LeeBit
	addu r28,r28,r29


	POP(r20)
	POP(r20)

	bsr LeeBit
	addu r28,r28,r29


	POP(r20)
	POP(r20)

	LOAD(r20, n_bit7)
	PUSH(r20)
	LEA(r20, campo_bits)
	PUSH(r20)

	bsr LeeBit

	and r28, r28, r29

	POP(r1)
	jmp(r1)


	TLB4:

	PUSH(r1)

	LOAD(r20,n_bit0)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1



	LOAD(r20,n_bit1)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1


	LOAD(r20,n_bit2)
	PUSH(r20)
	LEA(r20,campo_bits)
	PUSH(r20)

	bsr PoneBitA1


	bsr LeeBit
	addu r28,r28,r29

	POP(r20)
	POP(r20)

	bsr LeeBit
	addu r28,r28,r29


	POP(r20)
	POP(r20)

	bsr LeeBit
	addu r28,r28,r29


	POP(r20)
	POP(r20)





	POP(r1)
	jmp(r1)





	TCOMPRIME_DESCOMPRIME1:PUSH(r1) ; 0x10
		LEA(r20,comprimido_1)
		PUSH(r20)
	
        LEA(r20, palabra_comp1)
		PUSH(r20)
	

		bsr Comprime

		POP(r20)
		POP(r20)

		LEA(r20,decomprimido_1)
		PUSH(r20)
		LEA(r20,comprimido_1)
		PUSH(r20)

		bsr Descomprime

		POP(r20)
		POP(r20)



	POP(r1)
	jmp(r1)



	TCOMPRIME_DES2:PUSH(r1) ; 0x10

		LEA(r20,comprimido_2)
		PUSH(r20)

	
        LEA(r20, palabra_comp2)
		PUSH(r20)
	
		bsr Comprime

		POP(r20)
		POP(r20)

		

		LEA(r20,decomprimido_2)
		PUSH(r20)
		LEA(r20,comprimido_2)
		PUSH(r20)

		bsr Descomprime

		POP(r20)
		POP(r20)
	


	POP(r1)
	jmp(r1)





	TCOMPRIME_DES3:PUSH(r1) ; 0x10

		LEA(r20,comprimido_3)
		PUSH(r20)

	
        LEA(r20, palabra_comp3)
		PUSH(r20)
		
		bsr Comprime

		POP(r20)
		POP(r20)

		LEA(r20,decomprimido_3)
		PUSH(r20)
		LEA(r20,comprimido_3)
		PUSH(r20)

		bsr Descomprime

		POP(r20)
		POP(r20)



	POP(r1)
	jmp(r1)





	TCOMPRIME_DES4:PUSH(r1) ; 0x10
	
		LEA(r20,comprimido_4)
		PUSH(r20)


        LEA(r20, palabra_comp4)
		PUSH(r20)
		

		bsr Comprime

		POP(r20)
		POP(r20)

		LEA(r20,decomprimido_4)
		PUSH(r20)
		LEA(r20,comprimido_4)
		PUSH(r20)

		bsr Descomprime

		POP(r20)
		POP(r20)



	POP(r1)
	jmp(r1)





	TCOMPRIME_DES5:PUSH(r1) ; 0x10
	
		LEA(r20,comprimido_5)
		PUSH(r20)

        LEA(r20, palabra_comp5)
		PUSH(r20)
		

		bsr Comprime

		POP(r20)
		POP(r20)

		LEA(r20,decomprimido_5)
		PUSH(r20)
		LEA(r20,comprimido_5)
		PUSH(r20)

		bsr Descomprime

		POP(r20)
		POP(r20)



	POP(r1)
	jmp(r1)





	TCOMPRIME_DES6:PUSH(r1) ; 0x10
		LEA(r20,comprimido_6)
		PUSH(r20)
        LEA(r20, palabra_comp6)
		PUSH(r20)
		

		bsr Comprime

		POP(r20)
		POP(r20)

		LEA(r20,decomprimido_6)
		PUSH(r20)
		LEA(r20,comprimido_6)
		PUSH(r20)

		bsr Descomprime

		POP(r20)
		POP(r20)



	POP(r1)
	jmp(r1)









		


org 20000 ;-------------PROGRAMA--------------


	START:



	LOAD(r30, r30_inicio)




	or r1,r0,1
	or r2,r0,2
	or r3,r0,3
	or r4 ,r0,4
	or r5 ,r0,5
	or r6, r0,6
	or r7, r0,7
	or r8 ,r0,8
	or r9, r0,9
	or r10, r0,10
	or r11, r0,11
	or r12 ,r0,12
	or r13 ,r0,13
	or r14, r0,14
	or r15, r0,15
	or r16 ,r0,16
	or r17 ,r0,17
	or r18, r0,18
	or r19, r0,19
	or r20 ,r0,20
	or r21, r0,21
	or r22, r0,22
	or r23, r0,23
	or r24 ,r0,24
	or r25, r0,25
	or r26, r0,26
	or r27, r0,27
	or r28, r0,28













	PUSH(r20)
	PUSH(r1)

	;BREAK:


	bsr TCOMPRIME_DES2

	;BREAK:



	POP(r1)


	POP(r20)







