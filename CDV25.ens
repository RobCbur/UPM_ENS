org 512

palabra: data "abzxqwyu√±l"
palabra_longad2: data 0x00



org 1024



DBNZ: MACRO (ra,eti)
    sub ra,ra,1
    cmp r4,ra,0
    bb0 2,r4,eti
ENDMACRO

LEA: MACRO (ra, eti)
    or ra, r0, low(eti)
    or.u ra, ra, high(eti)
ENDMACRO


LOAD: MACRO (ra, eti)
    LEA (ra, eti)
    ld ra, ra, r0
ENDMACRO


POP: MACRO(ra)
    ld ra,r30,0
    st r0, r30,r0
    add r30,r30,4
ENDMACRO

PUSH: MACRO (ra)
    sub r30,r30,4
    st ra,r30,0
ENDMACRO





LongCad:PUSH(r1) ;r31,20

PUSH(r31) ;r31,16
PUSH(r3) ;r31,12
PUSH(r11) ;r31,8
PUSH(r4) ;r31,4
PUSH(r12) ; r31,0
xor r3,r3,r3
xor r11,r11,r11
xor r4,r4,r4
xor r12,r12,r12

or r31, r30 ,0 ;marco de pila

ld r11, r31, 24          ;r3 = contador
subu r11,r11,4          ;r11 = puntero cadena
subu r3,r3, 4



addu r3,r3,4            ; bucle
addu r11,r11,4
ld r12, r11, 0          ; r12 = una palabra de la cadena
cmp r4 , r12 , r0
bb0 12,r4, -4           ;  si no  hay \0 en la palabra suma 4 y a la siguiente palabra, sino sigue


subu r3,r3, 1            
subu r11,r11,1

addu r11,r11,1          ;bucle
addu r3,r3,1 

ld.bu r12,r11,0         ;r12 = un char de la palabra
cmp r4 , r12 , r0      
bb0 2,r4, -4            ; si r12 es \0 para, sino al sig char de la palabra

or r29, r3, r0          ; r3 a r29 

or r30 , r31, r0

POP(r12)
POP(r4)
POP(r11)
POP(r3)
POP(r31)
POP(r1)
jmp(r1)



BuscaCar:PUSH(r1) ;direccion de retorno ; r31, 32

PUSH(r31) ; antiguo r31 ; r31, 28
PUSH(r3) ; r3 = contador ; r31, 24
PUSH(r11) ; puntero ; r31, 20
PUSH(r4) ;cmp / temp ; r31, 16
PUSH(r6) ;tmp ; r31, 12
PUSH(r5) ;contiene C; r31, 08
PUSH(r12) ;contiene bit de palabra ; r31, 04
PUSH(r7) ; r31, 0

xor r7,r7,r7
xor r5, r5, r5
xor r3,r3,r3
xor r11,r11,r11
xor r4,r4,r4
xor r12,r12,r12


or r31, r30 ,0 ;marco de pila

ld r5, r31, 48
ld r11, r31, 44
ld r4, r31 , 40
ld r6, r31, 36
subu r7 , r6,r4
addu r11, r11, r4   


subu r11,r11,1     ;r11 = puntero cadena
subu r3,r3, 1   ;r3 = contador


addu r3,r3,1          
addu r11,r11,1 ;bucle

ld.bu r12, r11, 0        ; r12 = una palabra de la cadena
cmp r4 , r12 , r5
cmp r6 , r12 ,r0
or r4,r6,r4
cmp r6, r7, r3
or r4,r4,r6
bb0 2,r4, -8
      



or r29, r3, r0    
ld r4, r31 , 40        ; r3 a r29 
addu r29,r29, r4        ; r3 a r29 

or r30 , r31, r0

POP(r7)
POP(r12)
POP(r5)
POP(r6)
POP(r4)
POP(r11)
POP(r3)
POP(r31)
POP(r1)
jmp(r1)


CoincidenCad: PUSH(r1) ;31,32

PUSH(r31) ;31,28
PUSH(r3) ; 31,24
PUSH(r11) ;31,20
PUSH(r4) ;r31,16
PUSH(r12) ; r31,12
PUSH(r21) ;r31,8
PUSH(r22) ; r31,4
PUSH(r5) ;r31,0

xor r5,r5,r5
xor r3,r3,r3
xor r11,r11,r11
xor r4,r4,r4
xor r12,r12,r12
xor r21,r21,r21
xor r22,r22,r22

or r31, r30 ,0 ;marco de pila

ld r11, r31, 40
ld r12, r31,36        ;r3 = contador
subu r11,r11,1
subu r12,r12,1
subu r3,r3,1        ;r11 = puntero cadena


addu r3,r3,1
addu r12,r12,1            ; bucle
addu r11,r11,1
ld.bu r21, r11, 0
ld.bu r22, r12,0          ; r12 = una palabra de la cadena
cmp r4 , r21, r22
cmp r5, r21,r0
bb0 2,r4, 2; si r12 es \0 , sino al sig char de la palabra
bb0 2 , r5 , -8

or r29, r3, r0          ; r3 a r29 
or r30 , r31, r0


POP(r22)
POP(r21)
POP(r12)
POP(r4)
POP(r11)
POP(r3)
POP(r31)
POP(r1)
jmp(r1)

org 5000

START:

or r30 ,r0, 256


or r4 ,r0,4
or r5 ,r0,5
or r6, r0,6
or r7, r0,7
or r8 ,r0,8
or r9, r0,9
or r10, r0,10
or r11, r0,11
or r12 ,r0,12
or r13 ,r0,13
or r14, r0,14
or r15, r0,15
or r16 ,r0,16
or r17 ,r0,17
or r18, r0,18
or r19, r0,19
or r20 ,r0,20
or r21, r0,21
or r22, r0,22
or r23, r0,23




;LEA(r3, palabra)
;PUSH(r3)
;LEA(r3, LongCad)
;jsr(r3)
;POP(r3)